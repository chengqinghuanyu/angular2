{"version":3,"sources":["../source/format.js"],"names":["matches_entirely","parse_phone_number_and_country_phone_code","get_phone_code","get_formats","get_format_pattern","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_international_format","get_metadata_by_country_phone_code","format","first_argument","second_argument","third_argument","fourth_argument","sort_out_arguments","input","format_type","metadata","country_metadata","country","countries","phone","country_phone_code","number","national_number","format_national_number","FIRST_GROUP_PATTERN","format_national_number_using_format","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_formatting_rule","national_prefix_may_be_omitted","replace","formatted_number","local_to_international_style","format_as","choose_format_for_number","available_formats","length","last_leading_digits_pattern","search","local","trim","Error"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { matches_entirely } from './common'\n\nimport\n{\n\tparse_phone_number_and_country_phone_code\n}\nfrom './parse'\n\nimport\n{\n\tget_phone_code,\n\tget_formats,\n\tget_format_pattern,\n\tget_format_format,\n\tget_format_leading_digits_patterns,\n\tget_format_national_prefix_formatting_rule,\n\tget_format_national_prefix_is_optional_when_formatting,\n\tget_format_international_format,\n\tget_metadata_by_country_phone_code\n}\nfrom './metadata'\n\n// Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// format('8005553535', 'RU', 'International')\n// format('8005553535', 'RU', 'International', metadata)\n// format({ phone: '8005553535', country: 'RU' }, 'International')\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\n// format('+78005553535', 'National')\n// format('+78005553535', 'National', metadata)\n// ```\n//\nexport default function format(first_argument, second_argument, third_argument, fourth_argument)\n{\n\tconst { input, format_type, metadata } = sort_out_arguments(first_argument, second_argument, third_argument, fourth_argument)\n\n\tlet country_metadata\n\n\tif (input.country)\n\t{\n\t\tcountry_metadata = metadata.countries[input.country]\n\t}\n\n\tconst { country_phone_code, number } = parse_phone_number_and_country_phone_code(input.phone, metadata)\n\n\tif (country_phone_code)\n\t{\n\t\t// Check country restriction\n\t\tif (input.country && country_metadata &&\n\t\t\tcountry_phone_code !== get_phone_code(country_metadata))\n\t\t{\n\t\t\treturn input.phone\n\t\t}\n\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata)\n\t}\n\n\tif (!country_metadata)\n\t{\n\t\treturn input.phone\n\t}\n\n\tswitch (format_type)\n\t{\n\t\tcase 'International':\n\t\t\tif (!number)\n\t\t\t{\n\t\t\t\treturn `+${get_phone_code(country_metadata)}`\n\t\t\t}\n\t\t\tconst national_number = format_national_number(number, 'International', false, country_metadata)\n\t\t\treturn `+${get_phone_code(country_metadata)} ${national_number}`\n\n\t\tcase 'International_plaintext':\n\t\t\treturn `+${get_phone_code(country_metadata)}${input.phone}`\n\n\t\tcase 'National':\n\t\t\tif (!number)\n\t\t\t{\n\t\t\t\treturn ''\n\t\t\t}\n\t\t\treturn format_national_number(number, 'National', false, country_metadata)\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\n\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata)\n{\n\tconst format_pattern_matcher = new RegExp(get_format_pattern(format))\n\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata)\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\tconst national_prefix_may_be_omitted = !national_prefix_formatting_rule ||\n\t\t(national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix)\n\n\tif (!international && !national_prefix_may_be_omitted)\n\t{\n\t\treturn number.replace\n\t\t(\n\t\t\tformat_pattern_matcher,\n\t\t\tget_format_format(format).replace\n\t\t\t(\n\t\t\t\tFIRST_GROUP_PATTERN,\n\t\t\t\tnational_prefix_formatting_rule\n\t\t\t)\n\t\t)\n\t}\n\n\tconst formatted_number = number.replace\n\t(\n\t\tformat_pattern_matcher,\n\t\tinternational ? get_format_international_format(format) : get_format_format(format)\n\t)\n\n\tif (international)\n\t{\n\t\treturn local_to_international_style(formatted_number)\n\t}\n\n\treturn formatted_number\n}\n\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata)\n{\n\tconst format = choose_format_for_number(get_formats(country_metadata), number)\n\n\tif (!format)\n\t{\n\t\treturn number\n\t}\n\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata)\n}\n\nexport function choose_format_for_number(available_formats, national_number)\n{\n\tfor (let format of available_formats)\n\t{\n\t\t// Validate leading digits\n\t\tif (get_format_leading_digits_patterns(format).length > 0)\n\t\t{\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tconst last_leading_digits_pattern = get_format_leading_digits_patterns(format)[get_format_leading_digits_patterns(format).length - 1]\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(format))))\n\t\t{\n\t\t\treturn format\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\nexport function local_to_international_style(local)\n{\n\treturn local\n\t\t// Remove brackets\n\t\t.replace(/[\\(\\)]/g, '')\n\t\t// Replace dashes with spaces\n\t\t.replace(/\\-/g, ' ')\n\t\t.trim()\n}\n\n// Sort out arguments\nfunction sort_out_arguments(first_argument = '', second_argument, third_argument, fourth_argument)\n{\n\tlet input\n\tlet format_type\n\tlet metadata\n\n\t// Sort out arguments\n\tif (typeof first_argument === 'string')\n\t{\n\t\t// If country code is supplied\n\t\tif (typeof third_argument === 'string')\n\t\t{\n\t\t\t// Will be `parse()`d later in code\n\t\t\tinput =\n\t\t\t{\n\t\t\t\tphone   : first_argument,\n\t\t\t\tcountry : second_argument\n\t\t\t}\n\n\t\t\tformat_type = third_argument\n\t\t\tmetadata    = fourth_argument\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\telse\n\t\t{\n\t\t\t// Will be `parse()`d later in code\n\t\t\tinput =\n\t\t\t{\n\t\t\t\tphone : first_argument\n\t\t\t}\n\n\t\t\tif (typeof second_argument !== 'string')\n\t\t\t{\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\n\t\t\t}\n\n\t\t\tformat_type = second_argument\n\t\t\tmetadata    = third_argument\n\t\t}\n\t}\n\telse\n\t{\n\t\tinput       = first_argument\n\t\tformat_type = second_argument\n\t\tmetadata    = third_argument\n\t}\n\n\t// Sanity check\n\tif (!metadata)\n\t{\n\t\tthrow new Error('Metadata not passed')\n\t}\n\n\tswitch (format_type)\n\t{\n\t\tcase 'International':\n\t\tcase 'International_plaintext':\n\t\tcase 'National':\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\n\t}\n\n\treturn { input, format_type, metadata }\n}"]}