{"version":3,"sources":["../../source/tools/generate.js"],"names":["input","included_countries","extended","promisify","then","xml","country_phone_code_to_countries","countries","territory","country_code","$","id","has","country","phone_code","countryCode","leading_digits","leadingDigits","national_number_pattern","generalDesc","nationalNumberPattern","replace","national_prefix","nationalPrefix","national_prefix_for_parsing","nationalPrefixForParsing","undefined","national_prefix_transform_rule","nationalPrefixTransformRule","national_prefix_formatting_rule","nationalPrefixFormattingRule","national_prefix_is_optional_when_formatting","nationalPrefixOptionalWhenFormatting","Boolean","types","fixed_line","phone_type_pattern","mobile","toll_free","premium_rate","personal_number","voice_mail","uan","pager","voip","shared_cost","Error","availableFormats","formats","numberFormat","map","number_format","pattern","leading_digits_patterns","format","international_format","intlFormat","filter","indexOf","mainCountryForCode","unshift","push","phoneNumberMetadata","territories","main_country_for_region_code","main_country_for_region","country_phone_code","country_codes","length","type","phone_number_types","key","forEach","rule"],"mappings":"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","file":"generate.js","sourcesContent":["import { parseString } from 'xml2js'\nimport Promise from 'bluebird'\n\nimport { DIGIT_PLACEHOLDER } from '../as you type'\n\nconst phone_number_types =\n[\n\t'premium_rate',\n\t'toll_free',\n\t'shared_cost',\n\t'voip',\n\t'personal_number',\n\t'pager',\n\t'uan',\n\t'voice_mail',\n\t'fixed_line',\n\t'mobile'\n]\n\n// Excessive fields from \"PhoneNumberMetadata.xml\"\n// aren't included to reduce code complexity and size:\n//\n// * `<references>` — a link to ITU (International Telecommunication Union)\n//                    document describing phone numbering plan for a country\n//\n// * `<noInternationalDialling>` — who needs to input non-internationally-dialable phones\n//\n// * `<areaCodeOptional>` — we aren't in the XXth century,\n//                          it's a globalized world, so write your\n//                          phone numbers with area codes.\n//\n// * `<fixedLine>`, `<mobile>`, `<pager>`,\n//   `<tollFree>`, `<premiumRate>`,\n//   `<sharedCost>`, `<personalNumber>`,\n//   `<voip>`, `<uan>`, `<voicemail>` — who needs that in the XXIst century.\n//                                      just go mobile and stop talking nonsense.\n//\n// * `internationalPrefix`,\n//   `preferredInternationalPrefix` — who needs to parse (or format) those weird\n//                                    \"internationally dialed\" phone numbers\n//                                    like \"011 ...\" in the USA.\n//                                    this isn't XXth century, just use mobile phones.\n//\n// * `preferredExtnPrefix` — screw phone number extensions\n//\n// * `leadingZeroPossible` — (aka \"italian leading zero\")\n//                           who needs to parse a phone number into an integer.\n//                           just keep it as a string.\n//\n// * `carrierCodeFormattingRule` — only used in Brazil and Colombia\n//                                 when dialing from within those countries\n//                                 from mobile phones to fixed line phone numbers.\n//                                 i guess brazilians and colombians\n//                                 already know when to add those carrier codes\n//                                 by themselves (and when not to add them)\n//\n// * `mobileNumberPortableRegion` — is only used to disable phone number type detection\n//\n// * `<possibleLengths>` — is a redundant field to speed up testing of\n//                         whether a phone number format can be used to format\n//                         a particular national (significant) phone number.\n//\n// `libphonenumber/BuildMetadataFromXml.java` was used as a reference.\n// https://github.com/googlei18n/libphonenumber/blob/master/tools/java/common/src/com/google/i18n/phonenumbers/BuildMetadataFromXml.java\n//\n// There are three Xml metadata files in Google's `libphonenumber`:\n//\n//  * PhoneNumberMetadata.xml — core data, used both for parse/format and \"as you type\"\n//\n//  * PhoneNumberAlternateFormats.xml — alternative phone number formats.\n//                                      is presumably used for parsing phone numbers\n//                                      written in \"alternative\" formats.\n//                                      is not used by \"as you type\"\n//                                      presumably because of formats ambiguity\n//                                      when combined with the core data.\n//                                      this metadata is not used in this library\n//                                      as there's no clear description on what to do with it\n//                                      and how it works in the original `libphonenumber` code.\n//\n//  * ShortNumberMetadata.xml — emergency numbers, etc. not used in this library.\n//\nexport default function(input, included_countries, extended)\n{\n\treturn Promise.promisify(parseString)(input).then((xml) =>\n\t{\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/resources/PhoneNumberMetadata.xml\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/resources/phonemetadata.proto\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\t\t// https://github.com/googlei18n/libphonenumber/blob/master/javascript/i18n/phonenumbers/asyoutypeformatter.js\n\n\t\tconst country_phone_code_to_countries = {}\n\t\tconst countries = {}\n\n\t\tfor (let territory of xml.phoneNumberMetadata.territories[0].territory)\n\t\t{\n\t\t\t// A two-letter country code\n\t\t\tconst country_code = territory.$.id\n\n\t\t\t// Skip this country if it has not been explicitly included\n\t\t\tif (included_countries && !included_countries.has(country_code))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Country metadata\n\t\t\tconst country =\n\t\t\t{\n\t\t\t\t// Phone code related fields:\n\n\t\t\t\t// Phone code for phone numbers in this country.\n\t\t\t\t//\n\t\t\t\t// E.g. `1` for both USA and Canada.\n\t\t\t\t//\n\t\t\t\tphone_code: territory.$.countryCode,\n\n\t\t\t\t// In case of several countries\n\t\t\t\t// having the same country phone code,\n\t\t\t\t// these leading digits are the means\n\t\t\t\t// of classifying an international phone number\n\t\t\t\t// whether it belongs to a certain country.\n\t\t\t\t//\n\t\t\t\t// E.g. for Antigua and Barbuda\n\t\t\t\t// country phone code is `1` (same as USA)\n\t\t\t\t// and leading digits are `268`.\n\t\t\t\t//\n\t\t\t\tleading_digits: territory.$.leadingDigits,\n\n\t\t\t\t// The regular expression of all possible\n\t\t\t\t// national (significant) numbers for this country.\n\t\t\t\tnational_number_pattern: territory.generalDesc[0].nationalNumberPattern[0].replace(/\\s/g, ''),\n\n\t\t\t\t// National prefix related fields:\n\n\t\t\t\t// aka \"trunk code\".\n\t\t\t\t// This is the prefix prepended to a\n\t\t\t\t// national (significant) phone number\n\t\t\t\t// when dialed from within the country.\n\t\t\t\t// E.g. `0` for UK.\n\t\t\t\tnational_prefix: territory.$.nationalPrefix,\n\n\t\t\t\t// In some (many) countries the national prefix\n\t\t\t\t// is not just a constant digit (like `0` in UK)\n\t\t\t\t// but can be different depending on the phone number\n\t\t\t\t// (and can be also absent for some phone numbers).\n\t\t\t\t//\n\t\t\t\t// So `national_prefix_for_parsing` is used when parsing\n\t\t\t\t// a national-prefixed (local) phone number\n\t\t\t\t// into a national significant phone number\n\t\t\t\t// extracting that possible national prefix out of it.\n\t\t\t\t//\n\t\t\t\tnational_prefix_for_parsing : territory.$.nationalPrefixForParsing ? territory.$.nationalPrefixForParsing.replace(/\\s/g, '') : undefined,\n\n\t\t\t\t// If `national_prefix_for_parsing` regular expression\n\t\t\t\t// contains \"captured groups\", then `national_prefix_transform_rule`\n\t\t\t\t// defines how the national-prefixed (local) phone number is\n\t\t\t\t// parsed into a national significant phone number.\n\t\t\t\t//\n\t\t\t\t// Pseudocode:\n\t\t\t\t//\n\t\t\t\t// national_prefix_pattern = regular_expression('^(?:' + national_prefix_for_parsing + ')')\n\t\t\t\t// national_significant_number = all_digits.replace(national_prefix_pattern, national_prefix_transform_rule)\n\t\t\t\t//\n\t\t\t\t// E.g. if a country's national numbers are 6-digit\n\t\t\t\t// and national prefix is always `0`,\n\t\t\t\t// then `national_prefix_for_parsing` could be `0(\\d{6})`\n\t\t\t\t// and the corresponding `national_prefix_transform_rule` would be `$1`\n\t\t\t\t// (which is the default behaviour).\n\t\t\t\t//\n\t\t\t\t// Currently this feature is only used in\n\t\t\t\t// Argentina, Brazil, Mexico and San Marino\n\t\t\t\t// due to their messy telephone numbering plans.\n\t\t\t\t//\n\t\t\t\t// For example, mobile numbers in Argentina are written in two completely\n\t\t\t\t// different ways when dialed in-country and out-of-country\n\t\t\t\t// (e.g. 0343 15 555 1212 is exactly the same number as +54 9 343 555 1212).\n\t\t\t\t// Therefore for Argentina `national_prefix_transform_rule` is `9$1`.\n\t\t\t\t//\n\t\t\t\tnational_prefix_transform_rule: territory.$.nationalPrefixTransformRule,\n\n\t\t\t\t// Controls how national prefix is written\n\t\t\t\t// in a formatted local phone number.\n\t\t\t\t//\n\t\t\t\t// E.g. in Armenia national prefix is `0`\n\t\t\t\t// and `national_prefix_formatting_rule` is `($NP$FG)`\n\t\t\t\t// which means that a national significant phone number `xxxxxxxx`\n\t\t\t\t// matching phone number pattern `(\\d{2})(\\d{6})` with format `$1 $2`\n\t\t\t\t// is written as a local phone number `(0xx) xxxxxx`.\n\t\t\t\t//\n\t\t\t\tnational_prefix_formatting_rule: national_prefix_formatting_rule(territory.$.nationalPrefixFormattingRule, territory.$.nationalPrefix),\n\n\t\t\t\t// Is it possible that a national (significant)\n\t\t\t\t// phone number has leading zeroes?\n\t\t\t\t//\n\t\t\t\t// E.g. in Gabon some numbers start with a `0`\n\t\t\t\t// while the national prefix is also `0`\n\t\t\t\t// which is optional for mobile numbers.\n\t\t\t\t//\n\t\t\t\tnational_prefix_is_optional_when_formatting: territory.$.nationalPrefixOptionalWhenFormatting ? Boolean(territory.$.nationalPrefixOptionalWhenFormatting) : undefined,\n\n\t\t\t\t// I suppose carrier codes can be omitted.\n\t\t\t\t// They are required only for Brazil and Columbia,\n\t\t\t\t// and only when calling to fixed line numbers\n\t\t\t\t// from mobile phones within those countries.\n\t\t\t\t// I guess people living in those countries\n\t\t\t\t// would know that they need to add carrier codes.\n\t\t\t\t// Other people don't need to know that.\n\t\t\t\t// Anyway, if someone sends a Pull Request\n\t\t\t\t// implementing carrier codes as Google's `libphonenumber` does\n\t\t\t\t// then such Pull Request will likely be merged.\n\t\t\t\t//\n\t\t\t\t// // In some countries carrier code is required\n\t\t\t\t// // to dial certain phone numbers.\n\t\t\t\t// //\n\t\t\t\t// // E.g. in Colombia calling to fixed line numbers\n\t\t\t\t// // from mobile phones requires a carrier code when called within Colombia.\n\t\t\t\t// // Or, for example, Brazilian fixed line and mobile numbers\n\t\t\t\t// // need to be dialed with a carrier code when called within Brazil.\n\t\t\t\t// // Without that, most of the carriers won't connect the call.\n\t\t\t\t// // These are the only two cases when \"carrier codes\" are required.\n\t\t\t\t// //\n\t\t\t\t// carrier_code_formatting_rule: territory.$.carrierCodeFormattingRule,\n\n\t\t\t\t// These `types` will be purged later,\n\t\t\t\t// if they're not needed (which is most likely).\n\t\t\t\t// See `country_phone_code_to_countries` ambiguity for more info.\n\t\t\t\t//\n\t\t\t\ttypes:\n\t\t\t\t{\n\t\t\t\t\tfixed_line      : phone_type_pattern(territory, 'fixedLine'),\n\t\t\t\t\tmobile          : phone_type_pattern(territory, 'mobile'),\n\t\t\t\t\ttoll_free       : phone_type_pattern(territory, 'tollFree'),\n\t\t\t\t\tpremium_rate    : phone_type_pattern(territory, 'premiumRate'),\n\t\t\t\t\tpersonal_number : phone_type_pattern(territory, 'personalNumber'),\n\t\t\t\t\tvoice_mail      : phone_type_pattern(territory, 'voicemail'),\n\t\t\t\t\tuan             : phone_type_pattern(territory, 'uan'),\n\t\t\t\t\tpager           : phone_type_pattern(territory, 'pager'),\n\t\t\t\t\tvoip            : phone_type_pattern(territory, 'voip'),\n\t\t\t\t\tshared_cost     : phone_type_pattern(territory, 'sharedCost')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check that national (significant) phone number pattern\n\t\t\t// is set for this country (no \"default\" value here)\n\t\t\tif (!country.national_number_pattern)\n\t\t\t{\n\t\t\t\tthrow new Error(`\"generalDesc.nationalNumberPattern\" is missing for country ${country_code} metadata`)\n\t\t\t}\n\n\t\t\t// Some countries don't have `availableFormats` specified,\n\t\t\t// because those formats are inherited from the \"main country for region\".\n\t\t\tif (territory.availableFormats)\n\t\t\t{\n\t\t\t\tcountry.formats = territory.availableFormats[0].numberFormat.map((number_format) =>\n\t\t\t\t({\n\t\t\t\t\tpattern: number_format.$.pattern,\n\t\t\t\t\tleading_digits_patterns: number_format.leadingDigits ? number_format.leadingDigits.map(leading_digits => leading_digits.replace(/\\s/g, '')) : undefined,\n\t\t\t\t\tnational_prefix_formatting_rule: national_prefix_formatting_rule(number_format.$.nationalPrefixFormattingRule, territory.$.nationalPrefix),\n\t\t\t\t\tnational_prefix_is_optional_when_formatting: number_format.$.nationalPrefixOptionalWhenFormatting,\n\t\t\t\t\tformat: number_format.format[0],\n\t\t\t\t\tinternational_format: number_format.intlFormat ? number_format.intlFormat[0] : undefined\n\t\t\t\t}))\n\t\t\t\t// Screw local-only formats\n\t\t\t\t.filter(format => format.international_format !== 'NA')\n\n\t\t\t\t// Sanity check (using no \"default\" for this field)\n\t\t\t\tfor (let format of country.formats)\n\t\t\t\t{\n\t\t\t\t\t// Never happens\n\t\t\t\t\tif (!format.format)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new Error(`No phone number format \"format\" supplied for pattern ${format.pattern} for ${country_code}`)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never happens\n\t\t\t\t\tif (format.format.indexOf(DIGIT_PLACEHOLDER) >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new Error(`Phone number format \"${format.format}\" contains a reserved \"${DIGIT_PLACEHOLDER}\" symbol for pattern ${format.pattern} for ${country_code}`)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add this country's metadata\n\t\t\t// to the metadata map.\n\t\t\tcountries[country_code] = country\n\n\t\t\t// Register this country's \"country phone code\"\n\n\t\t\tif (!country_phone_code_to_countries[country.phone_code])\n\t\t\t{\n\t\t\t\tcountry_phone_code_to_countries[country.phone_code] = []\n\t\t\t}\n\n\t\t\t// In case of several countries\n\t\t\t// having the same country phone code.\n\t\t\t//\n\t\t\t// E.g. for USA and Canada, USA is the\n\t\t\t// \"main country for phone code 1\".\n\t\t\t//\n\t\t\t// (maybe this field is not used at all\n\t\t\t//  in which case this field is to be removed)\n\t\t\t//\n\t\t\tif (territory.$.mainCountryForCode === \"true\")\n\t\t\t{\n\t\t\t\tcountry_phone_code_to_countries[country.phone_code].unshift(country_code)\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcountry_phone_code_to_countries[country.phone_code].push(country_code)\n\t\t\t}\n\t\t}\n\n\t\t// Some countries don't have `availableFormats` specified,\n\t\t// because those formats are meant to be copied\n\t\t// from the \"main country for region\".\n\t\tfor (let country_code of Object.keys(countries))\n\t\t{\n\t\t\tconst country = countries[country_code]\n\n\t\t\tconst main_country_for_region_code = country_phone_code_to_countries[country.phone_code][0]\n\t\t\tconst main_country_for_region = countries[main_country_for_region_code]\n\t\t\tcountry.formats = main_country_for_region.formats\n\n\t\t\t// Some countries like Saint Helena and Falkland Islands\n\t\t\t// ('AC', 'FK', 'KI', 'NU', 'SH', 'TA', ...)\n\t\t\t// don't have any phone number formats\n\t\t\t// and phone numbers are formatted as a block in those countries.\n\t\t\tif (!country.formats)\n\t\t\t{\n\t\t\t\tcountry.formats = []\n\t\t\t}\n\t\t}\n\n\t\t// Turns out that `<generalDesc><nationalNumberPattern/></generalDesc>`\n\t\t// is not preemptive at all: it's too unspecific for the cases\n\t\t// when several countries correspond to the same country phone code\n\t\t// (e.g. NANPA: US, Canada, etc — all correspond to the same `1` country phone code).\n\t\t// For these cases all those bulky `<fixedLine/>`, `<mobile/>`, etc\n\t\t// patterns are required. Therefore retain them for these rare cases.\n\t\t//\n\t\t// This inncreases metadata size by 5 KiloBytes.\n\t\t//\n\t\tfor (let country_phone_code of Object.keys(country_phone_code_to_countries))\n\t\t{\n\t\t\tconst country_codes = country_phone_code_to_countries[country_phone_code]\n\n\t\t\t// Purge `types` regular expressions (they are huge)\n\t\t\t// when they're not needed for resolving country phone code\n\t\t\t// to country phone number matching.\n\t\t\t// E.g. when there's a one-to-one correspondence\n\t\t\t// between a country phone code and a country code\n\t\t\tif (!extended)\n\t\t\t{\n\t\t\t\tif (country_codes.length === 1)\n\t\t\t\t{\n\t\t\t\t\tdelete countries[country_codes[0]].types\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let country_code of country_codes)\n\t\t\t{\n\t\t\t\t// Leading digits for a country are sufficient\n\t\t\t\t// to resolve country phone code ambiguity.\n\t\t\t\tif (!extended)\n\t\t\t\t{\n\t\t\t\t\tif (countries[country_code].leading_digits)\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete countries[country_code].types\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst types = countries[country_code].types\n\n\t\t\t\t// Find duplicate regular expressions for types\n\t\t\t\t// and just discard such duplicate types\n\t\t\t\t// to reduce metadata size (by 5 KiloBytes).\n\t\t\t\tfor (const type of phone_number_types)\n\t\t\t\t{\n\t\t\t\t\tif (!types[type])\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove redundant types\n\t\t\t\t\t// (other types having the same regular expressions as this one)\n\t\t\t\t\tphone_number_types\n\t\t\t\t\t\t.filter(key => key !== type && types[key] === types[type])\n\t\t\t\t\t\t.forEach(key => delete types[key])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { countries, country_phone_code_to_countries }\n\t})\n}\n\n// Replaces $NP with national prefix and $FG with the first group ($1)\nfunction national_prefix_formatting_rule(rule, national_prefix)\n{\n\tif (!rule)\n\t{\n\t\treturn\n\t}\n\n\t// Replace $NP with national prefix and $FG with the first group ($1)\n\treturn rule\n\t\t.replace('$NP', national_prefix)\n\t\t.replace('$FG', '$1')\n}\n\n// Gets phone type pattern\nfunction phone_type_pattern(territory, type)\n{\n\treturn territory[type] ? territory[type][0].nationalNumberPattern[0].replace(/\\s/g, '') : undefined\n}"]}