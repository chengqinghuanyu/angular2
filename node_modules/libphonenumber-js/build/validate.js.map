{"version":3,"sources":["../source/validate.js"],"names":["is_valid","first_argument","second_argument","third_argument","input","metadata","Error","country","country_metadata","countries"],"mappings":";;;;;kBAsBwBA,Q;;AAtBxB;;;;AACA;;;;AAEA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,QAAT,CAAkBC,cAAlB,EAAkCC,eAAlC,EAAmDC,cAAnD,EACf;AAAA,2BAC6B,uCAAmBF,cAAnB,EAAmCC,eAAnC,EAAoDC,cAApD,CAD7B;AAAA,KACSC,KADT,uBACSA,KADT;AAAA,KACgBC,QADhB,uBACgBA,QADhB;;AAGC;;;AACA,KAAI,CAACA,QAAL,EACA;AACC,QAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACA;;AAED,KAAI,CAACF,KAAL,EACA;AACC,SAAO,KAAP;AACA;;AAED,KAAI,CAACA,MAAMG,OAAX,EACA;AACC,SAAO,KAAP;AACA;;AAED,KAAMC,mBAAmBH,SAASI,SAAT,CAAmBL,MAAMG,OAAzB,CAAzB;;AAEA,KAAI,yBAAUC,gBAAV,CAAJ,EACA;AACC,MAAI,CAAC,6BAAgBJ,KAAhB,EAAuBC,QAAvB,CAAL,EACA;AACC,UAAO,KAAP;AACA;AACD;;AAED,QAAO,IAAP;AACA","file":"validate.js","sourcesContent":["import parse, { is_viable_phone_number } from './parse'\nimport get_number_type, { sort_out_arguments } from './get number type'\n\nimport\n{\n\tget_types\n}\nfrom './metadata'\n\n// Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\nexport default function is_valid(first_argument, second_argument, third_argument)\n{\n\tconst { input, metadata } = sort_out_arguments(first_argument, second_argument, third_argument)\n\n\t// Sanity check\n\tif (!metadata)\n\t{\n\t\tthrow new Error('Metadata not passed')\n\t}\n\n\tif (!input)\n\t{\n\t\treturn false\n\t}\n\n\tif (!input.country)\n\t{\n\t\treturn false\n\t}\n\n\tconst country_metadata = metadata.countries[input.country]\n\n\tif (get_types(country_metadata))\n\t{\n\t\tif (!get_number_type(input, metadata))\n\t\t{\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}"]}